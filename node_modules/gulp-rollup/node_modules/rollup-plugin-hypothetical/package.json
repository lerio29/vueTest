{
  "name": "rollup-plugin-hypothetical",
  "version": "1.2.1",
  "description": "gives Rollup an imaginary file system, e.g. for testing other plugins",
  "main": "index.js",
  "engines": {
    "node": ">=0.12"
  },
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Permutatrix/rollup-plugin-hypothetical.git"
  },
  "keywords": [
    "rollup-plugin"
  ],
  "author": {
    "name": "Permutator",
    "email": "permutatorem@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/Permutatrix/rollup-plugin-hypothetical/issues"
  },
  "homepage": "https://github.com/Permutatrix/rollup-plugin-hypothetical#readme",
  "devDependencies": {
    "mocha": "^2.4.5",
    "rollup": "^0.26.2"
  },
  "readme": "# rollup-plugin-hypothetical [![npm][npm-image]][npm-url] [![Dependency Status][david-image]][david-url] [![Build Status][travis-image]][travis-url]\nThis allows [Rollup] modules to import hypothetical files passed in as options to the plugin.\n\n## Installation\n```bash\nnpm install --save-dev rollup-plugin-hypothetical\n```\n\n## Usage\n```js\n// rollup.config.js\nimport hypothetical from 'rollup-plugin-hypothetical';\n\nexport default {\n  entry: './dir/a.js',\n  plugins: [hypothetical({\n    files: {\n      './dir/a.js': `\n        import foo from './b.js';\n        foo();\n      `,\n      './dir/b.js': `\n        export default function foo() {\n          console.log(\"Hello, world!\");\n        }\n      `\n    }\n  })]\n};\n```\n\n## Sourcemaps\nTo attach a sourcemap to a hypothetical file, simply pass in a `{ code, map }` object instead of a string. The sourcemap can have its own `sources`, `sourcesContent`, etc.\n\n## Options\n### options.files\nAn object whose keys are paths, either relative to the current working directory or absolute, and whose values are the code within the hypothetical files at those paths.\n\n### options.allowRealFiles\nSet this to `true` to allow mixing of hypothetical and actual files. \"Actual\" files can be files accessed by Rollup or produced by plugins further down the chain.\n\n### options.allowExternalModules\nSet this to `false` to forbid importing of external modules.\n\n### options.leaveIdsAlone\nWhen this is set to `true`, the IDs in `import` statements won't be treated as paths and will instead be looked up directly in the `files` object. There will be no relative importing, path normalization, or restrictions on the contents of IDs.\n\n### options.impliedExtensions\nSet this to an array of file extensions to try appending to imports if an exact match isn't found. Defaults to `['.js']`. If this is set to `false` or an empty array, file extensions in imports will be treated as mandatory.\n\n### options.cwd\nWhen this is set to a directory name, relative file paths will be resolved relative to that directory rather than `process.cwd()`. When it's set to `false`, they will be resolved relative to an imaginary directory that cannot be expressed as an absolute path.\n\n\n## License\nMIT\n\n\n[npm-url]:    https://npmjs.org/package/rollup-plugin-hypothetical\n[david-url]:  https://david-dm.org/Permutatrix/rollup-plugin-hypothetical\n[travis-url]: https://travis-ci.org/Permutatrix/rollup-plugin-hypothetical\n\n[npm-image]:    https://img.shields.io/npm/v/rollup-plugin-hypothetical.svg\n[david-image]:  https://img.shields.io/david/Permutatrix/rollup-plugin-hypothetical/master.svg\n[travis-image]: https://img.shields.io/travis/Permutatrix/rollup-plugin-hypothetical/master.svg\n\n[Rollup]: https://www.npmjs.com/package/rollup\n",
  "readmeFilename": "README.md",
  "_id": "rollup-plugin-hypothetical@1.2.1",
  "_from": "rollup-plugin-hypothetical@^1.1.0"
}
